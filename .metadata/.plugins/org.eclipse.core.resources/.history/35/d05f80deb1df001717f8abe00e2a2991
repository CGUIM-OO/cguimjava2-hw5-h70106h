import java.util.ArrayList;

public class Table {
	private int MAXPLAYER = 4;
	private Deck deck; // 新增 一型別為Deck的變數(instance field)，存放所有的牌
	private Player[] player = new Player[MAXPLAYER];// 新增 一型別為Player[]
													// 的變數(instance
													// field)，存放所有的玩家
	private Dealer dealer;// 新增 一型別為Dealer 的變數(instance field)，存放一個莊家
	private int[] pos_betArray = new int[MAXPLAYER];// 新增 int[]
													// pos_betArray，存放每個玩家在一局下的注(instance
													// field)
	private ArrayList<Card> player1Card = new ArrayList<Card>();
	private ArrayList<Card> player2Card = new ArrayList<Card>();
	private ArrayList<Card> player3Card = new ArrayList<Card>();
	private ArrayList<Card> player4Card = new ArrayList<Card>();
	private ArrayList<Card> dealerCard = new ArrayList<Card>();

	public Table(int nDeck) {
		deck = new Deck(nDeck);
	}

	// 將Player放到牌桌上
	// pos為牌桌位置，最多MAXPLAYER人
	public void set_player(int pos, Player p) {
		player[pos] = p;
	}

	private void ask_each_player_about_bets() {
		for (int i = 0; i < MAXPLAYER; i++) {
			player[i].sayHello();// 請每個玩家打招呼
			player[i].makeBet();// 請每個玩家下注
			pos_betArray[i] = player[i].makeBet();// 每個玩家下的注要存在pos_betArray供之後使用
		}
	}

	public Player[] get_player() {
		return player;
	}

	public void set_dealer(Dealer d) {
		dealer = d;
	}

	public Card get_face_up_card_of_dealer() {
		return dealer.getOneRoundCard().get(0);
	}

	// 發牌給玩家跟莊家
	// 先發兩張打開的牌給玩家，再一張蓋著的牌，以及一張打開的牌給莊家。(提示: setOneRoundCard())
	// 發牌給莊家後，在畫面上印出莊家打開的牌"Dealer's face up card is " (提示: printCard())
	private void distribute_cards_to_dealer_and_players() {

		player1Card.add(deck.getOneCard(true));
		player1Card.add(deck.getOneCard(true));
		player[0].setOneRoundCard(player1Card);

		player2Card.add(deck.getOneCard(true));
		player2Card.add(deck.getOneCard(true));
		player[1].setOneRoundCard(player2Card);

		player3Card.add(deck.getOneCard(true));
		player3Card.add(deck.getOneCard(true));
		player[2].setOneRoundCard(player3Card);

		player4Card.add(deck.getOneCard(true));
		player4Card.add(deck.getOneCard(true));
		player[3].setOneRoundCard(player4Card);

		dealerCard.add(deck.getOneCard(false));
		dealerCard.add(deck.getOneCard(true));
		dealer.setOneRoundCard(dealerCard);
		System.out.print("Dealer's face up card is ");
		dealerCard.get(0).printCard();
	}

	// 問每個玩家要不要牌 (提示: hit_me(Table tbl))
	// 請參照HW4.java，使用do while迴圈詢問各個玩家
	// 詢問順序: 按照加入牌局的順序而定 (位置)
	// 如果玩家要牌，請在畫面上印出"Hit! "+ 玩家的名字+ "’s cards now: "，並把玩家"要牌後的完整牌"印出。
	// 最後將新的牌用setOneRoundCard()設定回玩家物件。
	// 如果爆了，請不要再問玩家是否要牌
	// 如果玩家不要牌了，請在畫面上印出 玩家的名字+"Pass hit!"
	private void ask_each_player_about_hits() {
		boolean hit = false;
		do {
			hit = player[0].hit_me(this); // this
			if (hit) {
				player1Card.add(deck.getOneCard(true));
				player[0].setOneRoundCard(player1Card);
				System.out.print("Hit! ");
				System.out.println(player[0].getName() + "'s Cards now:");
				player[0].printAllCard();
			} else {
				System.out.println(player[0].getName() + ", Pass hit!");
				player[0].printAllCard();
			}
		} while (hit);

		hit = false;
		do {
			hit = player[1].hit_me(this); // this
			if (hit) {
				player2Card.add(deck.getOneCard(true));
				player[1].setOneRoundCard(player2Card);
				System.out.print("Hit! ");
				System.out.println(player[1].getName() + "'s Cards now:");
				player[1].printAllCard();
			} else {
				System.out.println(player[1].getName() + ", Pass hit!");
				player[1].printAllCard();
			}
		} while (hit);

		hit = false;
		do {
			hit = player[2].hitMe(); // this
			if (hit) {
				player3Card.add(deck.getOneCard(true));
				player[2].setOneRoundCard(player3Card);
				System.out.print("Hit! ");
				System.out.println(player[2].getName() + "'s Cards now:");
				player[2].printAllCard();
			} else {
				System.out.println(player[2].getName() + ", Pass hit!");
				player[2].printAllCard();
			}
		} while (hit);

		hit = false;
		do {
			hit = player[3].hitMe(); // this
			if (hit) {
				player4Card.add(deck.getOneCard(true));
				player[3].setOneRoundCard(player4Card);
				System.out.print("Hit! ");
				System.out.println(player[3].getName() + "'s Cards now:");
				player[3].printAllCard();
			} else {
				System.out.println(player[3].getName() + ", Pass hit!");
				player[3].printAllCard();
			}
		} while (hit);
	}

	// 詢問莊家是否要牌，完成後，印出"Dealer's hit is over!"
	private void ask_dealer_about_hits() {

		boolean hit = false;
		do {
			hit = dealer.hit_me(this); // this
			if (hit) {
				dealerCard.add(deck.getOneCard(true));
				dealer.setOneRoundCard(dealerCard);
			} else {
				System.out.println("Dealer's hit is over!");

			}
		} while (hit);
	}

	// 印出莊家的點數和牌"Dealer's card value is "+總點數+" ,Cards:"+牌們 (提示: printAllCard())
	// 莊家跟每一個玩家的牌比
	// 針對每個玩家，先印出 玩家姓名+" card value is "+玩家總點數
	// 看誰贏，要是莊家贏，把玩家籌碼沒收，印出", Loss "+下注籌碼數+" Chips, the Chips now is:
	// "+玩家最新籌碼數(提示: get_current_chips())
	// 要是莊家輸，則賠玩家與下注籌碼相符之籌碼，印出",Get "+下注籌碼數+" Chips, the Chips now is:
	// "+玩家最新籌碼數(提示: get_current_chips())
	// 不輸不贏，印出",chips have no change! The Chips now is: "+玩家最新籌碼數(提示:
	// get_current_chips())
	private void calculate_chips() {
		// dealer
		System.out.println("Dealer's card value is " + dealer.getTotalValue() + " ,Cards:");
		dealer.printAllCard();

		int p1Bet = player[0].makeBet();
		int p2Bet = player[1].makeBet();
		int p3Bet = player[2].makeBet();
		int p4Bet = player[3].makeBet();

		// 玩家贏的訊息
		// player[i].getName() + " card value is " + player[i].getTotalValue()+
		// " ,Get 1 Chips, the Chips now is:" + player[i].getCurrentChips();

		// 莊家贏的訊息
		// player[i].getName() + " card value is " + player[i].getTotalValue() +
		// ", Loss "+ player[i].makeBet() + " Chips, the Chips now is:" +
		// player[i].getCurrentChips();

		// 平手的訊息
		// player[i].getName() + " card value is " + player[i].getTotalValue()+
		// " chips have no change!, the Chips now is: " +
		// player[i].getCurrentChips();

		// player1
		System.out.println(player[0].getName() + " ,Cards:");
		player[0].printAllCard();
		
		// 莊家沒爆,玩家爆
		if (dealer.getTotalValue() <= 21 && player[0].getTotalValue() > 21) {
			player[0].increaseChips(-p1Bet);
			System.out.println(player[0].getName() + " card value is " + player[0].getTotalValue() + ", Loss "
					+ p1Bet + " Chips, the Chips now is:" + player[0].getCurrentChips());
		}

		// 莊家爆,玩家沒爆
		if (dealer.getTotalValue() > 21 && player[0].getTotalValue() <= 21) {
			player[0].increaseChips(p1Bet);
			System.out.println(player[0].getName() + " card value is " + player[0].getTotalValue()
					+ " ,Get 1 Chips, the Chips now is:" + player[0].getCurrentChips());
		}

		// 莊家沒爆,玩家沒爆
		if (dealer.getTotalValue() <= 21 && player[0].getTotalValue() <= 21) {
			if (dealer.getTotalValue() == player[0].getTotalValue()) {
				System.out.println(player[0].getName() + " card value is " + player[0].getTotalValue()
						+ " chips have no change!, the Chips now is: " + player[0].getCurrentChips());
			}
			if (dealer.getTotalValue() > player[0].getTotalValue()) {
				player[0].increaseChips(-p1Bet);
				System.out.println(player[0].getName() + " card value is " + player[0].getTotalValue() + ", Loss "
						+ p1Bet + " Chips, the Chips now is:" + player[0].getCurrentChips());
			}
			if (dealer.getTotalValue() < player[0].getTotalValue()) {
				player[0].increaseChips(p1Bet);
				System.out.println(player[0].getName() + " card value is " + player[0].getTotalValue()
						+ " ,Get 1 Chips, the Chips now is:" + player[0].getCurrentChips());
			}

		}
		
		//莊家爆,玩家爆
		if (dealer.getTotalValue() > 21 && player[0].getTotalValue() > 21) {
			if (dealer.getTotalValue() == player[0].getTotalValue()) {
				System.out.println(player[0].getName() + " card value is " + player[0].getTotalValue()
						+ " chips have no change!, the Chips now is: " + player[0].getCurrentChips());
			}
			if (dealer.getTotalValue() < player[0].getTotalValue()) {
				player[0].increaseChips(-p1Bet);
				System.out.println(player[0].getName() + " card value is " + player[0].getTotalValue() + ", Loss "
						+ p1Bet + " Chips, the Chips now is:" + player[0].getCurrentChips());
			}
			if (dealer.getTotalValue() > player[0].getTotalValue()) {
				player[0].increaseChips(p1Bet);
				System.out.println(player[0].getName() + " card value is " + player[0].getTotalValue()
						+ " ,Get 1 Chips, the Chips now is:" + player[0].getCurrentChips());
			}

		}
		
		//player2
		System.out.println(player[1].getName() + " ,Cards:");
		player[1].printAllCard();
		
		// 莊家沒爆,玩家爆
		if (dealer.getTotalValue() <= 21 && player[1].getTotalValue() > 21) {
			player[1].increaseChips(-p2Bet);
			System.out.println(player[1].getName() + " card value is " + player[1].getTotalValue() + ", Loss "
					+ p2Bet + " Chips, the Chips now is:" + player[1].getCurrentChips());
		}

		// 莊家爆,玩家沒爆
		if (dealer.getTotalValue() > 21 && player[1].getTotalValue() <= 21) {
			player[1].increaseChips(p2Bet);
			System.out.println(player[1].getName() + " card value is " + player[1].getTotalValue()
					+ " ,Get 1 Chips, the Chips now is:" + player[1].getCurrentChips());
		}

		// 莊家沒爆,玩家沒爆
		if (dealer.getTotalValue() <= 21 && player[1].getTotalValue() <= 21) {
			if (dealer.getTotalValue() == player[1].getTotalValue()) {
				System.out.println(player[1].getName() + " card value is " + player[1].getTotalValue()
						+ " chips have no change!, the Chips now is: " + player[1].getCurrentChips());
			}
			if (dealer.getTotalValue() > player[1].getTotalValue()) {
				player[1].increaseChips(-p2Bet);
				System.out.println(player[1].getName() + " card value is " + player[1].getTotalValue() + ", Loss "
						+ p2Bet + " Chips, the Chips now is:" + player[1].getCurrentChips());
			}
			if (dealer.getTotalValue() < player[1].getTotalValue()) {
				player[1].increaseChips(p2Bet);
				System.out.println(player[1].getName() + " card value is " + player[1].getTotalValue()
						+ " ,Get 1 Chips, the Chips now is:" + player[1].getCurrentChips());
			}

		}
		
		//莊家爆,玩家爆
		if (dealer.getTotalValue() > 21 && player[1].getTotalValue() > 21) {
			if (dealer.getTotalValue() == player[1].getTotalValue()) {
				System.out.println(player[1].getName() + " card value is " + player[1].getTotalValue()
						+ " chips have no change!, the Chips now is: " + player[1].getCurrentChips());
			}
			if (dealer.getTotalValue() < player[1].getTotalValue()) {
				player[1].increaseChips(-p2Bet);
				System.out.println(player[1].getName() + " card value is " + player[1].getTotalValue() + ", Loss "
						+ p2Bet + " Chips, the Chips now is:" + player[1].getCurrentChips());
			}
			if (dealer.getTotalValue() > player[1].getTotalValue()) {
				player[1].increaseChips(p2Bet);
				System.out.println(player[1].getName() + " card value is " + player[1].getTotalValue()
						+ " ,Get 1 Chips, the Chips now is:" + player[1].getCurrentChips());
			}

		}
		
		//player3
		System.out.println(player[2].getName() + " ,Cards:");
		player[2].printAllCard();
		
		// 莊家沒爆,玩家爆
		if (dealer.getTotalValue() <= 21 && player[2].getTotalValue() > 21) {
			player[2].increaseChips(-p3Bet);
			System.out.println(player[2].getName() + " card value is " + player[2].getTotalValue() + ", Loss "
					+ p3Bet + " Chips, the Chips now is:" + player[2].getCurrentChips());
		}

		// 莊家爆,玩家沒爆
		if (dealer.getTotalValue() > 21 && player[2].getTotalValue() <= 21) {
			player[2].increaseChips(p3Bet);
			System.out.println(player[2].getName() + " card value is " + player[2].getTotalValue()
					+ " ,Get 1 Chips, the Chips now is:" + player[2].getCurrentChips());
		}

		// 莊家沒爆,玩家沒爆
		if (dealer.getTotalValue() <= 21 && player[2].getTotalValue() <= 21) {
			if (dealer.getTotalValue() == player[2].getTotalValue()) {
				System.out.println(player[2].getName() + " card value is " + player[2].getTotalValue()
						+ " chips have no change!, the Chips now is: " + player[2].getCurrentChips());
			}
			if (dealer.getTotalValue() > player[2].getTotalValue()) {
				player[2].increaseChips(-p3Bet);
				System.out.println(player[2].getName() + " card value is " + player[2].getTotalValue() + ", Loss "
						+ p3Bet + " Chips, the Chips now is:" + player[2].getCurrentChips());
			}
			if (dealer.getTotalValue() < player[2].getTotalValue()) {
				player[2].increaseChips(p3Bet);
				System.out.println(player[2].getName() + " card value is " + player[2].getTotalValue()
						+ " ,Get 1 Chips, the Chips now is:" + player[2].getCurrentChips());
			}

		}
		
		//莊家爆,玩家爆
		if (dealer.getTotalValue() > 21 && player[2].getTotalValue() > 21) {
			if (dealer.getTotalValue() == player[2].getTotalValue()) {
				System.out.println(player[2].getName() + " card value is " + player[2].getTotalValue()
						+ " chips have no change!, the Chips now is: " + player[2].getCurrentChips());
			}
			if (dealer.getTotalValue() < player[2].getTotalValue()) {
				player[2].increaseChips(-p3Bet);
				System.out.println(player[2].getName() + " card value is " + player[2].getTotalValue() + ", Loss "
						+ p3Bet + " Chips, the Chips now is:" + player[2].getCurrentChips());
			}
			if (dealer.getTotalValue() > player[2].getTotalValue()) {
				player[2].increaseChips(p3Bet);
				System.out.println(player[2].getName() + " card value is " + player[2].getTotalValue()
						+ " ,Get 1 Chips, the Chips now is:" + player[2].getCurrentChips());
			}

		}
		
		//player4
		System.out.println(player[3].getName() + " ,Cards:");
		player[3].printAllCard();
		
		// 莊家沒爆,玩家爆
		if (dealer.getTotalValue() <= 21 && player[3].getTotalValue() > 21) {
			player[3].increaseChips(-p4Bet);
			System.out.println(player[3].getName() + " card value is " + player[3].getTotalValue() + ", Loss "
					+ p4Bet + " Chips, the Chips now is:" + player[3].getCurrentChips());
		}

		// 莊家爆,玩家沒爆
		if (dealer.getTotalValue() > 21 && player[3].getTotalValue() <= 21) {
			player[3].increaseChips(p4Bet);
			System.out.println(player[3].getName() + " card value is " + player[3].getTotalValue()
					+ " ,Get 1 Chips, the Chips now is:" + player[3].getCurrentChips());
		}

		// 莊家沒爆,玩家沒爆
		if (dealer.getTotalValue() <= 21 && player[3].getTotalValue() <= 21) {
			if (dealer.getTotalValue() == player[3].getTotalValue()) {
				System.out.println(player[3].getName() + " card value is " + player[3].getTotalValue()
						+ " chips have no change!, the Chips now is: " + player[3].getCurrentChips());
			}
			if (dealer.getTotalValue() > player[3].getTotalValue()) {
				player[3].increaseChips(-p4Bet);
				System.out.println(player[3].getName() + " card value is " + player[3].getTotalValue() + ", Loss "
						+ p4Bet + " Chips, the Chips now is:" + player[3].getCurrentChips());
			}
			if (dealer.getTotalValue() < player[3].getTotalValue()) {
				player[3].increaseChips(p4Bet);
				System.out.println(player[3].getName() + " card value is " + player[3].getTotalValue()
						+ " ,Get 1 Chips, the Chips now is:" + player[3].getCurrentChips());
			}

		}
		
		//莊家爆,玩家爆
		if (dealer.getTotalValue() > 21 && player[3].getTotalValue() > 21) {
			if (dealer.getTotalValue() == player[3].getTotalValue()) {
				System.out.println(player[3].getName() + " card value is " + player[3].getTotalValue()
						+ " chips have no change!, the Chips now is: " + player[3].getCurrentChips());
			}
			if (dealer.getTotalValue() < player[3].getTotalValue()) {
				player[3].increaseChips(-p4Bet);
				System.out.println(player[3].getName() + " card value is " + player[3].getTotalValue() + ", Loss "
						+ p4Bet + " Chips, the Chips now is:" + player[3].getCurrentChips());
			}
			if (dealer.getTotalValue() > player[3].getTotalValue()) {
				player[3].increaseChips(p4Bet);
				System.out.println(player[3].getName() + " card value is " + player[3].getTotalValue()
						+ " ,Get 1 Chips, the Chips now is:" + player[3].getCurrentChips());
			}

		}

		
	}

	public int[] get_palyers_bet() {
		return pos_betArray;
	}

	public void play() {
		ask_each_player_about_bets();
		distribute_cards_to_dealer_and_players();
		ask_each_player_about_hits();
		ask_dealer_about_hits();
		calculate_chips();
	}

}